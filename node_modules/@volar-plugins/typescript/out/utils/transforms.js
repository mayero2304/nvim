"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.boundSpanToLocationLinks = exports.entriesToLocationLinks = exports.entriesToLocations = void 0;
const vscode = __importStar(require("vscode-languageserver-protocol"));
function entriesToLocations(entries, ctx) {
    const locations = [];
    for (const entry of entries) {
        const entryUri = ctx.fileNameToUri(entry.fileName);
        const doc = ctx.getTextDocument(entryUri);
        if (!doc)
            continue;
        const range = vscode.Range.create(doc.positionAt(entry.textSpan.start), doc.positionAt(entry.textSpan.start + entry.textSpan.length));
        const location = vscode.Location.create(entryUri, range);
        locations.push(location);
    }
    return locations;
}
exports.entriesToLocations = entriesToLocations;
function entriesToLocationLinks(entries, ctx) {
    const locations = [];
    for (const entry of entries) {
        const entryUri = ctx.fileNameToUri(entry.fileName);
        const doc = ctx.getTextDocument(entryUri);
        if (!doc)
            continue;
        const targetSelectionRange = vscode.Range.create(doc.positionAt(entry.textSpan.start), doc.positionAt(entry.textSpan.start + entry.textSpan.length));
        const targetRange = entry.contextSpan ? vscode.Range.create(doc.positionAt(entry.contextSpan.start), doc.positionAt(entry.contextSpan.start + entry.contextSpan.length)) : targetSelectionRange;
        const originSelectionRange = entry.originalTextSpan ? vscode.Range.create(doc.positionAt(entry.originalTextSpan.start), doc.positionAt(entry.originalTextSpan.start + entry.originalTextSpan.length)) : undefined;
        const location = vscode.LocationLink.create(entryUri, targetRange, targetSelectionRange, originSelectionRange);
        locations.push(location);
    }
    return locations;
}
exports.entriesToLocationLinks = entriesToLocationLinks;
function boundSpanToLocationLinks(info, originalDoc, ctx) {
    const locations = [];
    if (!info.definitions)
        return locations;
    const originSelectionRange = vscode.Range.create(originalDoc.positionAt(info.textSpan.start), originalDoc.positionAt(info.textSpan.start + info.textSpan.length));
    for (const entry of info.definitions) {
        const entryUri = ctx.fileNameToUri(entry.fileName);
        const doc = ctx.getTextDocument(entryUri);
        if (!doc)
            continue;
        const targetSelectionRange = vscode.Range.create(doc.positionAt(entry.textSpan.start), doc.positionAt(entry.textSpan.start + entry.textSpan.length));
        const targetRange = entry.contextSpan ? vscode.Range.create(doc.positionAt(entry.contextSpan.start), doc.positionAt(entry.contextSpan.start + entry.contextSpan.length)) : targetSelectionRange;
        const location = vscode.LocationLink.create(entryUri, targetRange, targetSelectionRange, originSelectionRange);
        locations.push(location);
    }
    return locations;
}
exports.boundSpanToLocationLinks = boundSpanToLocationLinks;
//# sourceMappingURL=transforms.js.map