"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const vscode = __importStar(require("vscode-languageserver-protocol"));
const shared_1 = require("../shared");
function register(ctx) {
    const ts = ctx.typescript.module;
    return (uri, position, context) => {
        const document = ctx.getTextDocument(uri);
        if (!document)
            return;
        const options = {};
        if (context?.triggerKind === vscode.SignatureHelpTriggerKind.Invoked) {
            options.triggerReason = {
                kind: 'invoked'
            };
        }
        else if (context?.triggerKind === vscode.SignatureHelpTriggerKind.TriggerCharacter) {
            options.triggerReason = {
                kind: 'characterTyped',
                triggerCharacter: context.triggerCharacter,
            };
        }
        else if (context?.triggerKind === vscode.SignatureHelpTriggerKind.ContentChange) {
            options.triggerReason = {
                kind: 'retrigger',
                triggerCharacter: context.triggerCharacter,
            };
        }
        const fileName = ctx.uriToFileName(document.uri);
        const offset = document.offsetAt(position);
        const helpItems = (0, shared_1.safeCall)(() => ctx.typescript.languageService.getSignatureHelpItems(fileName, offset, options));
        if (!helpItems)
            return;
        return {
            activeSignature: helpItems.selectedItemIndex,
            activeParameter: helpItems.argumentIndex,
            signatures: helpItems.items.map(item => {
                const signature = {
                    label: '',
                    documentation: undefined,
                    parameters: []
                };
                signature.label += ts.displayPartsToString(item.prefixDisplayParts);
                item.parameters.forEach((p, i, a) => {
                    const label = ts.displayPartsToString(p.displayParts);
                    const parameter = {
                        label,
                        documentation: ts.displayPartsToString(p.documentation)
                    };
                    signature.label += label;
                    signature.parameters.push(parameter);
                    if (i < a.length - 1) {
                        signature.label += ts.displayPartsToString(item.separatorDisplayParts);
                    }
                });
                signature.label += ts.displayPartsToString(item.suffixDisplayParts);
                return signature;
            }),
        };
    };
}
exports.register = register;
//# sourceMappingURL=signatureHelp.js.map