import { LanguageServicePluginContext } from '@volar/language-service';
import * as vscode from 'vscode-languageserver-protocol';
import { AttrNameCasing, TagNameCasing } from '../types';
export declare function convertTagName(context: LanguageServicePluginContext, _ts: NonNullable<LanguageServicePluginContext['typescript']>, uri: string, casing: TagNameCasing): Promise<vscode.TextEdit[] | undefined>;
export declare function convertAttrName(context: LanguageServicePluginContext, _ts: NonNullable<LanguageServicePluginContext['typescript']>, uri: string, casing: AttrNameCasing): Promise<vscode.TextEdit[] | undefined>;
export declare function getNameCasing(context: LanguageServicePluginContext, _ts: NonNullable<LanguageServicePluginContext['typescript']>, uri: string): Promise<{
    tag: TagNameCasing;
    attr: AttrNameCasing;
}>;
export declare function detect(context: LanguageServicePluginContext, _ts: NonNullable<LanguageServicePluginContext['typescript']>, uri: string): {
    tag: TagNameCasing[];
    attr: AttrNameCasing[];
};
